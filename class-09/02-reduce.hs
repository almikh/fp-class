import System.Environment
import System.Random

{-
  Напишите функцию reduce, принимающую один целочисленный аргумент a и возвращающую 0,
  если аргумент делится на 3, a^2, если он на 3 не делится и является при этом нечётным,
  a^3 в остальных случаях.
-}

reduce :: Integral a => a -> a
reduce val
  | val `mod` 3 == 0 = 0
  | odd val = val^2
  | otherwise = val^3

{-
  Напишите функцию, применяющую функцию reduce заданное количество раз к значению в контексте,
  являющемся функтором:
-}

reduceNF :: (Functor f, Integral a) => Integer -> f a -> f a
reduceNF 0 val = val
reduceNF n val = reduceNF (n-1) (fmap reduce val)

{-
  Реализуйте следующие функции-преобразователи произвольным, но, желательно, осмысленным и
  нетривиальным способом.
-}

toList :: Integral a => [(a, a)]  -> [a]
toList [] = []
toList xs = map (\(x, y) -> (x-y)^2) xs

toMaybe :: Integral a => [(a, a)]  -> Maybe a
toMaybe [] = Nothing
toMaybe xs =  fmap (sum . map (\(x, y) -> (x-y)^2)) (Just xs)

toEither :: Integral a => [(a, a)]  -> Either String a
toEither [] = Left "Empty!"
toEither xs = fmap (sum . map (\(x, y) -> (x-y)^2)) (Right xs)

-- воспользуйтесь в этой функции случайными числами
toIO :: [(Integer, Integer)]  -> IO Integer
toIO xs = do
  (num, _) <- fmap (randomR (1, 100)) newStdGen
  return $ (sum (map (\(x, y) -> x*y) xs)) `mod` num

{-
  В параметрах командной строки задано имя текстового файла, в каждой строке
  которого записана пара целых чисел, разделённых пробелами. Загрузите
  данные из файла в список пар целых чисел, преобразуйте этот список к
  значениям в контекстах [], Maybe, Either String и IO и примените к каждому
  из контекстов функцию reduceNF (значение N также должно браться из
  параметров командной строки).
-}

parseArgs :: [String] -> (FilePath, Integer)
parseArgs [filepath, n] = (filepath, read n)

readData :: FilePath -> IO [(Integer, Integer)]
readData file = do
  contents <- readFile file
  return $ map (cast . words) $ filter (not . null) $ lines contents
    where
      cast [f, s] = (read f, read s)


main = do
  (fname, n) <- parseArgs `fmap` getArgs
  ps <- readData fname
  print $ "toList: " ++ (show (reduceNF n (toList ps)))
  print $ "toMaybe: " ++ (show (reduceNF n (toMaybe ps)))
  print $ "toEither: " ++ (show (reduceNF n (toEither ps)))
  reduceNF n (toIO ps) >>= print

{-
  Подготовьте несколько тестовых файлов, демонстрирующих особенности различных контекстов.
  Скопируйте сюда результаты вызова программы на этих файлах.
-}

{-
  Пустой файл:
  ===> n = 2
  "toList: []"
  "toMaybe: Nothing"
  "toEither: Left \"Empty!\""
  0
-}

{-
  1 2
  58 69
  4 3
  69 1
  3 0
  ===> n = 2
  "toList: [1,214358881,1,966407804840271334616088784666624,0]"
  "toMaybe: Just 1245020818536021435729923829661696"
  "toEither: Right 1245020818536021435729923829661696"
  625
-}

{-
  1 2
  58 69
  4 3
  69 1
  3 0
  ===> n = 5
  "toList: [1,4457915684525902395869512133369841539490161434991526715513934826241,
  1,397494913137957361522748301900211583898508628998140953260779291080975961802434
  47972934504782008598645533429577081640069365300104941346205422873212211729400744
  00027447249675590536708924770333531606403045538955367923864693759706975749962193
  24040069243994079254801894396093305542966032089272944849333785761069196071926401
  81127641078815747306346913934877864084680327313935062556902759599489934133008013
  13337240135738741687120979044630478150191139681359162276872436230205228793295806
  59669208691284043901495359377904495270082262554728002949581597011511774674068376
  47030323416638393405945101014152030501101451837640264341130126085484918559830891
  25447387636139048847461617378881159558830907176651126462758649751648137672295510
  92555623258743940070873631227336483117522989145749629340256846329062571337592408
  43156369724493380405324787382672117806668600343056635796136708930037326769673306
  5567874842624,0]"
  "toMaybe: Just 37133729120317689374552598435328786827842211220112651998965972023
  41396708444262261160296235154638856252114569410430073983107516353585008765991755
  68376518615294557990458191949991112784364448351602350183151375488496553031999878
  41866027329669170364058166600884408129559818705688354142588202868299835224693584
  39727037482197225849761299722915315642211956048641257178980192350405579782989349
  79135903492571792554244508177929744950956481641032538751905517596013389924606352
  64606683645768823568429340775279276872300738717754823005610302431823715961025880
  35355685606885169126991815763833448925019057341922214239157431087376893889186651
  56766887521073262886286380984478119291565304490648864077619937857383024453334873
  11495458813867038108164338047258638841472569117981181914719254557271769467711037
  35507575633858938260083310843554404735951642935201634204151714256120384302001396
  60060435818703485274387644416"
  "toEither: Right 371337291203176893745525984353287868278422112201126519989659720
  23413967084442622611602962351546388562521145694104300739831075163535850087659917
  55683765186152945579904581919499911127843644483516023501831513754884965530319998
  78418660273296691703640581666008844081295598187056883541425882028682998352246935
  84397270374821972258497612997229153156422119560486412571789801923504055797829893
  49791359034925717925542445081779297449509564816410325387519055175960133899246063
  52646066836457688235684293407752792768723007387177548230056103024318237159610258
  80353556856068851691269918157638334489250190573419222142391574310873768938891866
  51567668875210732628862863809844781192915653044906488640776199378573830244533348
  73114954588138670381081643380472586388414725691179811819147192545572717694677110
  37355075756338589382600833108435544047359516429352016342041517142561203843020013
  9660060435818703485274387644416"
  15025461748906708859452861070130993269553796873817927041
-}
